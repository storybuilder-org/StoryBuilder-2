name: ReleaseBuilder
on:
  workflow_dispatch:
    inputs:
      VersionNumber:
        description: 'Version'     
        required: true
        default: '2.13.0.0'
jobs:
  build:
    runs-on: windows-latest

    env:
      Solution_Name: StoryCAD.sln

    steps:
    - name: Download Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install .NET
    - name: Install .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.x.x

    #Install MSBUILD
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    #Bump version number
    - name: Increase Version Number 
      run: |
        $VersionRegex = "\d+\.\d+\.\d+\.\d+"
        $BUILD_BUILDNUMBER = "${{ github.event.inputs.VersionNumber }}"
        $ManifestVersionRegex = " Version=""\d+\.\d+\.\d+\.\d+"""
        $ScriptPath = $null
        try
        {
            $ScriptPath = (Get-Variable MyInvocation).Value.MyCommand.Path
            $ScriptDir = Split-Path -Parent $ScriptPath
        }
        catch {}
        # Get and validate the version data
        $VersionData = [regex]::matches($BUILD_BUILDNUMBER,$VersionRegex)
        $NewVersion = $VersionData[0]
        Write-Verbose "Version: $NewVersion"
        $AssemblyVersion = $NewVersion
        $ManifestVersion = " Version=""$NewVersion"""
        $filecontent = Get-Content("D:\a\StoryCAD\StoryCAD\StoryCAD\Package.appxmanifest")
        attrib $file -r
        $filecontent -replace $ManifestVersionRegex, $ManifestVersion | Out-File "D:\a\StoryCAD\StoryCAD\StoryCAD\Package.appxmanifest" utf8
        
    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: |
        msbuild $env:Solution_Name /t:Restore /p:Configuration=Release
        msbuild $env:Solution_Name /t:Restore /p:Configuration=Debug
      env:
        Configuration: ${{ matrix.configuration }}
    
    - name: Restore StoryCAD Tests
      run: |
        msbuild StoryCADTests\StoryCADTests.csproj /t:Restore /p:Configuration=Release
        msbuild StoryCADTests\StoryCADTests.csproj /t:Restore /p:Configuration=Debug

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
        $certificatePath = "GitHubActionsWorkflow.pfx"
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
        [IO.File]::WriteAllText("D:\a\StoryCAD\StoryCAD\StoryCAD\.env", "${{ secrets.ENV }}")
        
    # Create the app package by building and packaging the project
    - name: Create the MSIX
      run: |
        msbuild $env:Solution_Name /p:Configuration=Release /p:Platform=x64 /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile="D:\a\StoryCAD\StoryCAD\GitHubActionsWorkflow.pfx" /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true
        msbuild $env:Solution_Name /p:Configuration=Release /p:Platform=x86 /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile="D:\a\StoryCAD\StoryCAD\GitHubActionsWorkflow.pfx" /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true
        msbuild $env:Solution_Name /p:Configuration=Release /p:Platform=arm64 /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile="D:\a\StoryCAD\StoryCAD\GitHubActionsWorkflow.pfx" /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true
      env:
        Appx_Bundle: Never
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir: Packages\
        Configuration: ${{ matrix.configuration }}
        Platform: ${{ matrix.platform }}

    # Remove the pfx
    - name: Remove the pfx
      run: |
        Remove-Item -path GitHubActionsWorkflow.pfx
      
   #Cleans output and file names
    - name: Run MSIX Cleaner
      run: |
        D:\a\StoryCAD\StoryCAD\.github\workflows\MSIX.ps1 -TargetDirectory "D:\a\StoryCAD\StoryCAD\StoryCAD\Packages"

        
    - name: Write help file
      run: |
        "Hello, Thank you for using StoryCAD Release ${{ github.event.inputs.VersionNumber }} 
        1) Open StoryCAD.cer, this should bring up the certificate import wizard
        2) Press install certificate, and change store location to Local Machine, then press next
        3) Change the option to Place All Certificates in the following store and click browse
        4) Select Trusted People and press OK and then press finish
        Now you will want to open the msix folder and select the configuration you want, 
        if you don't know what configuration to pick then we recommend StoryCAD Release x64.msix.
        
        See what's changed here:
        https://github.com/StoryBuilder-org/StoryCAD/releases/tag/${{ github.event.inputs.VersionNumber }}" | Out-File -FilePath "D:\a\StoryCAD\StoryCAD\StoryCAD\Packages\Install Instructions.txt"
    
    - name: Archive Release
      uses: thedoctor0/zip-release@master
      with:
        type: 'zip'
        filename: 'Release.zip'
        path: D:\a\StoryCAD\StoryCAD\StoryCAD\Packages\

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload MSIX package
      uses: actions/upload-artifact@v4
      with:
        name: StoryCAD
        path: StoryCAD/StoryCAD/StoryCAD/Packages/*
        compression-level: 9
        include-hidden-files: true
  
    - name: Set up Git
      run: |
        git config user.name "Release Builder"
        git config user.email "jake@storybuilder.org"

    - name: Create tag
      run: |
        git tag -a "${{ github.event.inputs.VersionNumber }}" -m "${{ github.event.inputs.VersionNumber }}"
        git push origin "${{ github.event.inputs.VersionNumber }}"
  
    - name: Release Warm up
      run: |
          Test-Path D:\a\StoryCAD\StoryCAD\StoryCAD\Packages\Release.zip
          cd D:\a\StoryCAD\StoryCAD\StoryCAD\Packages\

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: Release.zip
        tag_name: ${{ github.event.inputs.VersionNumber }}
        draft: false
        fail_on_unmatched_files: true
        generate_release_notes: false
        token: ${{ secrets.GitHubToken }}
        body: ${{ steps.changelog.outputs.changes }}
